<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    	 http://www.springframework.org/schema/beans/spring-beans.xsd
     	 http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/tx
     	 http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 配置加载jdbc属性占位符文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!-- 开启注解实现Field注入 : @Resource @Autowired-->
	<context:annotation-config />
	
	<!-- 配置数据源(c3p0) -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close"
		p:driverClass="${c3p0.driverClass}"
		p:jdbcUrl="${c3p0.jdbcUrl}"
		p:user="${c3p0.user}"
		p:password="${c3p0.password}"
		p:minPoolSize="${c3p0.minPoolSize}"
		p:maxPoolSize="${c3p0.maxPoolSize}"
		p:initialPoolSize="${c3p0.initialPoolSize}"
	/>
	<!-- 配置sessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置加载hibernage主配置文件 -->
		<property name="configLocation" value="classpath:hibernage.cfg.xml"></property>
		<!-- 配置jpa注解扫描的持久化类 -->
		<property name="packagesToScan">
			<array>
				<value>com.jsoft.oa.admin.addressbook.entity</value>
				<value>com.jsoft.oa.admin.identity.entity</value>
				<value>com.jsoft.oa.admin.leave.entity</value>
			</array>
		</property>
	</bean>
	<!-- 配置事物管理器类-->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 配置tx声明式事务控制 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="load*" read-only="true"/>
			<tx:method name="*" read-only="false" rollback-for="RuntimeException"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置日志bean -->
	<bean id="logAdvice" class="com.jsoft.oa.core.aop.LogAdvice" />
	
	<!-- 配置aop切面 -->
	<aop:config>
		<!-- 配置事物切入点表达式 -->
		<aop:pointcut expression="execution(* com.jsoft.oa.*.*.service.*.*.*(..))" id="pt"/>
		<!-- 将上面的声明式事物控制应用到切入点表达式中的类 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
		
		<!-- 日志切面配置  aop:aspect将普通bean转换为切面bean-->
		<aop:aspect ref="logAdvice">
			<!-- 在目标方法执行前后切入 -->
			<aop:around method="around" pointcut-ref="pt"/>
			<!-- 在目标方法出现异常后切入(throwing属性将异常对象传入到日志切面类的error方法中)-->
			<aop:after-throwing method="error" pointcut-ref="pt" throwing="ex"/>
		</aop:aspect>
		
	</aop:config>
	
	<!-- ################ spring集成javamail配置 ################## -->
	<!-- spring的JavaMailSender接口bean -->
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"
		p:defaultEncoding="utf-8"
		p:host="smtp.163.com"
		p:username="fkjava8888"
		p:password="fkjava888">
		<property name="javaMailProperties">
			<props>
				<!-- 设置在发件服务器登录认证后，才可以发送 -->
				<prop key="mail.smtp.auth">true</prop>
			</props>
		</property>
	</bean>
	<!-- 自定义的EailSender接口bean注入spring的JavaMailSender接口 -->
	<bean id="emailSender" class="com.jsoft.oa.core.common.email.impl.EmailSenderImpl"
		p:from="fkjava8888@163.com"
		p:javaMailSender-ref="javaMailSender"
	></bean>
</beans>   
